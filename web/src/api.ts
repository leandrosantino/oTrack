/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetProfile200,
  PostLogin401,
  PostLogin404,
  PostLoginBody,
  PostUsers201,
  PostUsers401,
  PostUsersBody
} from './model'



/**
 * Get user data encrypted in access token
 */
export const getProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProfile200>> => {
    
    
    return axios.default.get(
      `/profile`,options
    );
  }


export const getGetProfileQueryKey = () => {
    return [`/profile`] as const;
    }

    
export const getGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof getProfile>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({ signal }) => getProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getProfile>>>
export type GetProfileQueryError = AxiosError<unknown>



export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postLogin = (
    postLoginBody: PostLoginBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.default.post(
      `/login`,
      postLoginBody,options
    );
  }



export const getPostLoginMutationOptions = <TData = Awaited<ReturnType<typeof postLogin>>, TError = AxiosError<PostLogin401 | PostLogin404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostLoginBody}, TContext>, axios?: AxiosRequestConfig}
) => {
const mutationKey = ['postLogin'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, {data: PostLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostLoginBody}, TContext>}

    export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>
    export type PostLoginMutationBody = PostLoginBody
    export type PostLoginMutationError = AxiosError<PostLogin401 | PostLogin404>

    export const usePostLogin = <TData = Awaited<ReturnType<typeof postLogin>>, TError = AxiosError<PostLogin401 | PostLogin404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostLoginBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        TData,
        TError,
        {data: PostLoginBody},
        TContext
      > => {

      const mutationOptions = getPostLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getLocation = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.default.get(
      `/location`,options
    );
  }


export const getGetLocationQueryKey = () => {
    return [`/location`] as const;
    }

    
export const getGetLocationQueryOptions = <TData = Awaited<ReturnType<typeof getLocation>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocation>>> = ({ signal }) => getLocation({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationQueryResult = NonNullable<Awaited<ReturnType<typeof getLocation>>>
export type GetLocationQueryError = AxiosError<unknown>



export function useGetLocation<TData = Awaited<ReturnType<typeof getLocation>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLocationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Create a new user
 */
export const postUsers = (
    postUsersBody: PostUsersBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUsers201>> => {
    
    
    return axios.default.post(
      `/users`,
      postUsersBody,options
    );
  }



export const getPostUsersMutationOptions = <TData = Awaited<ReturnType<typeof postUsers>>, TError = AxiosError<PostUsers401>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostUsersBody}, TContext>, axios?: AxiosRequestConfig}
) => {
const mutationKey = ['postUsers'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: PostUsersBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostUsersBody}, TContext>}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = PostUsersBody
    export type PostUsersMutationError = AxiosError<PostUsers401>

    export const usePostUsers = <TData = Awaited<ReturnType<typeof postUsers>>, TError = AxiosError<PostUsers401>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostUsersBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        TData,
        TError,
        {data: PostUsersBody},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
